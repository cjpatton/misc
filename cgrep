#!/usr/bin/python
# cgrep - search for code constructs (that may or may not 
# span multitple lines) over a set of files. For now this is
# is just a lexical search. For functions, we'll count 
# paranthesis. ~cjp 06/11/13
# TODO 
#  - fix directory mangling in dirBFS()
#  - findFunctionCalls returns "cur.executemany" on query 
#    "cur.execute()"
#  - pretty printing.


import re, os, sys
from optparse import OptionParser


# Code patterns
P_var    = '[\_a-zA-Z][\_a-zA-Z0-9]*'
P_scoped = '{var}(\.{var})*'.format(var = P_var)
P_func   = '{scoped}\(\)'.format(scoped = P_scoped)

exact = lambda(pattern) : '^{}$'.format(pattern)
R_var  = re.compile(exact(P_var))
R_func = re.compile(exact(P_func))


# Find instances of function calls. Return the 
# hits as a list of tuples with the start and 
# end indices. pattern = "function_name()". 
def findFunctionCalls(pattern, text): 
  OO = []; OOO = [] 
  for m in re.finditer(pattern[:-2], text):
    (oo, ooo) = m.span()
    OO.append(oo)
    OOO.append(ooo)
  OOO.append(len(text))

  res = []
  for i in range(1, len(OOO)): 
    depth = 0 
    for j in range(OOO[i-1], OOO[i]):
      if text[j] == '(':   depth += 1
      elif text[j] == ')': depth -= 1
      if depth == 0: 
        break
    res.append((OO[i-1], j+1))
  return res

def findNothing(pattern, text):
  return []

# Chosse which code pattern to use.
def selectFind(pattern): 
  if R_func.match(pattern):
    return findFunctionCalls
  else:
    return findNothing
  

# Find the line number for each pattern hit. 
# TODO fix multiple hits on same line issue. 
def getHitLines(hits, text): 
  res = []
  line = 1
  line_index = 0
  j = 0
  for i in range(len(text)): 
    if j == len(hits): 
      break

    if text[i] == '\n': 
      line += 1
      line_index = i

    if i == hits[j][0]: 
      res.append((line, line_index)) 
      j += 1

  return res

# Display hits. 
def displayHits(hit_lines, hits, text, fn): 
  for ((line, i), (o, oo)) in zip(hit_lines, hits): 

    #while i < o: pass TODO print match text in a different color? 

    started = False
    while i < oo: 
      if text[i] == '\n': 
        sys.stdout.write('%s%s:%-4d' % ('\n' if started else '', fn, line))
        started = True
        line += 1
      else: sys.stdout.write(text[i])
      i += 1

    while text[i] != '\n': 
      sys.stdout.write(text[i])
      i += 1
    
    sys.stdout.write('\n')

def codeGrep(pattern, text, fn): 
  find = selectFind(pattern)
  hits = find(pattern, text)
  hit_lines = getHitLines(hits, text)
  displayHits(hit_lines, hits, text, fn)


def dirBFS(args, maxDepth=-1, depth=0):
  files = []

  if maxDepth > 0 and depth > maxDepth: 
    return files

  for fn in args:
    if not os.path.isdir(fn): 
      files.append(fn)    
  
  for fn in args: 
    if os.path.isdir(fn): 
      newArgs = map(lambda f: './' + fn + '/' +  f, os.listdir(fn))
      files += dirBFS(newArgs, maxDepth, depth + 1)

  return files

# Main

parser = OptionParser(usage="%prog [options] file list // [options] \"pattern\" < file")

parser.add_option('-e', type=str, metavar='PATTERN', default=None,
                  help='Search pattern')

parser.add_option('-r', action='store_true', default=False,
                  help='Descend into directories')

parser.add_option('-i', action='store_true', default=False,
                  help='Case insensitive search')

(options, args) = parser.parse_args()



if options.e: 
  pattern = options.e
  if len(args) > 0: 
    if not options.r: 
      for fn in args: 
        if not os.path.isdir(fn): 
          text = open(fn, 'r').read()
          codeGrep(pattern, text, fn)
        else: 
          print >>sys.stderr, 'cgrep: skipping directory \'%s\'' % fn 
    else:
      for fn in dirBFS(args): 
        text = open(fn, 'r').read()
        codeGrep(pattern, text, fn)
          
  else: 
    text = sys.stdin.read()
    codeGrep(pattern, text, 'stdin')

elif len(args) == 1: 
  pattern = args[0]
  text = sys.stdin.read()
  codeGrep(pattern, text, 'stdin')

else: 
  parser.print_usage()
  sys.exit(1)


